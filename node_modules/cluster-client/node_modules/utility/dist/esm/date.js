// only set once.
let TIMEZONE = '';
export function resetTimezone() {
    TIMEZONE = '';
    let _hourOffset = Math.floor(-(new Date().getTimezoneOffset()) / 60);
    if (_hourOffset >= 0) {
        TIMEZONE += '+';
    }
    else {
        TIMEZONE += '-';
    }
    _hourOffset = Math.abs(_hourOffset);
    const _hourOffsetStr = _hourOffset < 10 ? `0${_hourOffset}` : `${_hourOffset}`;
    TIMEZONE += `${_hourOffsetStr}00`;
    return TIMEZONE;
}
resetTimezone();
const MONTHS = {
    '01': 'Jan',
    '02': 'Feb',
    '03': 'Mar',
    '04': 'Apr',
    '05': 'May',
    '06': 'Jun',
    '07': 'Jul',
    '08': 'Aug',
    '09': 'Sep',
    // eslint-disable-next-line quote-props
    '10': 'Oct',
    // eslint-disable-next-line quote-props
    '11': 'Nov',
    // eslint-disable-next-line quote-props
    '12': 'Dec',
};
function getDateStringParts(d, onlyDate) {
    const monthNum = d.getMonth() + 1;
    const month = monthNum < 10 ? `0${monthNum}` : `${monthNum}`;
    const dateNum = d.getDate();
    const date = dateNum < 10 ? `0${dateNum}` : `${dateNum}`;
    if (onlyDate) {
        return [`${d.getFullYear()}`, month, date];
    }
    const hoursNum = d.getHours();
    const hours = hoursNum < 10 ? `0${hoursNum}` : `${hoursNum}`;
    const minutesNum = d.getMinutes();
    const minutes = minutesNum < 10 ? `0${minutesNum}` : `${minutesNum}`;
    const secondsNum = d.getSeconds();
    const seconds = secondsNum < 10 ? `0${secondsNum}` : `${secondsNum}`;
    return [`${d.getFullYear()}`, month, date, hours, minutes, seconds];
}
/**
 * Access log format date. format: `moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')`
 */
export function accessLogDate(d) {
    // 16/Apr/2013:16:40:09 +0800
    d = d || new Date();
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    return `${date}/${MONTHS[month]}/${year}:${hours}:${minutes}:${seconds} ${TIMEZONE}`;
}
export function logDate(d, msSep) {
    if (typeof d === 'string') {
        // logDate(msSep)
        msSep = d;
        d = new Date();
    }
    else {
        // logDate(d, msSep)
        d = d || new Date();
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    const millisecondsNum = d.getMilliseconds();
    let milliseconds = `${millisecondsNum}`;
    if (millisecondsNum < 10) {
        milliseconds = `00${millisecondsNum}`;
    }
    else if (millisecondsNum < 100) {
        milliseconds = `0${millisecondsNum}`;
    }
    msSep = msSep || '.';
    return `${year}-${month}-${date} ${hours}:${minutes}:${seconds}${msSep}${milliseconds}`;
}
export const YYYYMMDDHHmmssSSS = logDate;
/**
 * `moment().format('YYYY-MM-DD HH:mm:ss')` format date string.
 */
export function YYYYMMDDHHmmss(d, options) {
    d = d || new Date();
    if (!(d instanceof Date)) {
        d = new Date(d);
    }
    let dateSep = '-';
    let timeSep = ':';
    if (options?.dateSep) {
        dateSep = options.dateSep;
    }
    if (options?.timeSep) {
        timeSep = options.timeSep;
    }
    const [year, month, date, hours, minutes, seconds] = getDateStringParts(d);
    return `${year}${dateSep}${month}${dateSep}${date} ${hours}${timeSep}${minutes}${timeSep}${seconds}`;
}
/**
 * `moment().format('YYYY-MM-DD')` format date string.
 */
export function YYYYMMDD(d, sep) {
    if (typeof d === 'string') {
        // YYYYMMDD(sep)
        sep = d;
        d = new Date();
    }
    else {
        // YYYYMMDD(d, sep)
        d = d || new Date();
        if (typeof sep !== 'string') {
            sep = '-';
        }
    }
    const [year, month, date] = getDateStringParts(d, true);
    return `${year}${sep}${month}${sep}${date}`;
}
/**
 * return datetime struct.
 *
 * @return {Object} date
 *  - {Number} YYYYMMDD, 20130401
 *  - {Number} H, 0, 1, 9, 12, 23
 */
export function datestruct(now) {
    now = now || new Date();
    return {
        YYYYMMDD: now.getFullYear() * 10000 + (now.getMonth() + 1) * 100 + now.getDate(),
        H: now.getHours(),
    };
}
/**
 * Get Unix's timestamp in seconds.
 */
export function timestamp(t) {
    if (t) {
        // convert timestamp to Date
        // timestamp(timestampValue)
        let v;
        if (typeof t === 'string') {
            v = Number(t);
        }
        else {
            v = t;
        }
        if (String(v).length === 10) {
            v *= 1000;
        }
        return new Date(v);
    }
    // get current timestamp
    return Math.round(Date.now() / 1000);
}
/**
 * Parse timestamp to Date
 */
export function parseTimestamp(t) {
    return timestamp(t);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQUNqQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbEIsTUFBTSxVQUFVLGFBQWE7SUFDM0IsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLElBQUksV0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3JCLFFBQVEsSUFBSSxHQUFHLENBQUM7SUFDbEIsQ0FBQztTQUFNLENBQUM7UUFDTixRQUFRLElBQUksR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFDRCxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwQyxNQUFNLGNBQWMsR0FBRyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDO0lBQy9FLFFBQVEsSUFBSSxHQUFHLGNBQWMsSUFBSSxDQUFDO0lBQ2xDLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFDRCxhQUFhLEVBQUUsQ0FBQztBQUVoQixNQUFNLE1BQU0sR0FBMkI7SUFDckMsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztJQUNYLElBQUksRUFBRSxLQUFLO0lBQ1gsdUNBQXVDO0lBQ3ZDLElBQUksRUFBRSxLQUFLO0lBQ1gsdUNB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